# -*- coding: utf-8 -*-
"""Realtor_API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSo-2a2_3OHDLb5Fh0MjldUJIFmagQMD
"""

import requests
import pandas as pd
from pandas.io.json import json_normalize

nocal_cities=['San Jose', 'San Francisco','Sacramento','Stockton', 'Oakland']


for city in nocal_cities:
    
    url = "https://realtor.p.rapidapi.com/properties/v2/list-for-sale"
    condoquery = {"sort":"relevance","prop_type":"condo","city":f"{nocal_cities}","limit":"200","offset":"0","state_code":"CA","radius":"10"}
    headers = {
        'x-rapidapi-host': "realtor.p.rapidapi.com",
        'x-rapidapi-key': "520f14fa3cmshe49651674a1d7cfp1a9ee8jsne02bb6c7f697"
        }
    condo_response = requests.request("GET", url, headers=headers, params=condoquery)
    condo_json = condo_response.json()

    condo_properties = condo_json['properties']

    condo_listing=pd.DataFrame(condo_properties)
    print(f'initial dataframe length - {nocal_cities}: len({condo_listing})')

    condo_address = json_normalize(condo_listing['address'])

    condo_listing_df=pd.concat([condo_listing[['property_id', 'prop_type', 'price', 'baths_half', 'baths_full', 'beds', 'building_size', 'lot_size']],condo_address[['city', 'postal_code', 'state_code','county']]],axis=1)
    condo_listing_df.dropna(subset=['lot_size','building_size'], inplace=True)

    condo_listing_df.fillna(0,inplace=True)

    lot_size = json_normalize(condo_listing_df['lot_size'])
    buiding_size = json_normalize(condo_listing_df['building_size'])

    print(f'dataframe length after dropna - {nocal_cities}: {len(condo_listing_df)}')

    clean_condo_df=pd.concat([condo_listing_df,lot_size['size']],axis=1)
    clean_condo_df.drop(columns='lot_size',inplace=True)
    clean_condo_df.rename(columns={'size':'lot_size'},inplace=True)

    condo_df = pd.concat([clean_condo_df,building_size['size']],axis=1)
    condo_df.drop(columns='building_size',inplace=True)
    condo_df.rename(columns={'size':'building_size'},inplace=True)
    condo_df['price'].min()

    condo_df.to_csv(f'../data/{nocal_cities}_condo.csv')
